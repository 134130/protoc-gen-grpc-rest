// Code generated by protoc-gen-go-rest. DO NOT EDIT.

package api

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	http "net/http"
	strings "strings"
)

// UserServiceRestClient is the client API for UserService service.
type UserServiceRestClient interface {
	GetUsers(ctx context.Context) (*UserList, error)
	// FIXME: login_id should be a parameter
	GetUser(ctx context.Context) (*User, error)
	CreateUser(ctx context.Context, req *User) (*User, error)
	DeleteUser(ctx context.Context) error
}

type userServiceRestClient struct {
	c      *http.Client
	target string
}

func NewUserServiceRestClient(c *http.Client, target string) UserServiceRestClient {
	return &userServiceRestClient{
		c:      c,
		target: target,
	}
}

func (c *userServiceRestClient) GetUsers(ctx context.Context) (*UserList, error) {
	url := c.target + "/api/users"
	res := new(UserList)
	if err := c.do(ctx, c.c, http.MethodGet, url, nil, res); err != nil {
		return nil, err
	}
	return res, nil
}

func (c *userServiceRestClient) GetUser(ctx context.Context) (*User, error) {
	url := c.target + "/api/users/{login_id}"
	res := new(User)
	if err := c.do(ctx, c.c, http.MethodGet, url, nil, res); err != nil {
		return nil, err
	}
	return res, nil
}

func (c *userServiceRestClient) CreateUser(ctx context.Context, req *User) (*User, error) {
	url := c.target + "/api/users"
	res := new(User)
	if err := c.do(ctx, c.c, http.MethodPost, url, req, res); err != nil {
		return nil, err
	}
	return res, nil
}

func (c *userServiceRestClient) DeleteUser(ctx context.Context) error {
	url := c.target + "/api/users/{login_id}"
	if err := c.do(ctx, c.c, http.MethodDelete, url, nil, nil); err != nil {
		return err
	}
	return nil
}

func (c *userServiceRestClient) do(ctx context.Context, client *http.Client, httpMethod, url string, req, res proto.Message) error {
	var m []byte
	var err error

	if req != nil {
		if m, err = protojson.Marshal(req); err != nil {
			return fmt.Errorf("failed to marshal request: %w", err)
		}
	}

	r, err := http.NewRequestWithContext(ctx, httpMethod, url, bytes.NewReader(m))
	if err != nil {
		return fmt.Errorf("failed to create request: %w", err)
	}

	r.Header.Set("Content-Type", "application/json")

	resp, err := c.c.Do(r)
	if err != nil {
		return err
	}

	data, err := io.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("failed to read response body: %w", err)
	}
	defer resp.Body.Close()

	if res == nil {
		return nil
	}

	contentType := resp.Header.Get("Content-Type")
	if contentType != "application/json" {
		switch {
		case resp.StatusCode < http.StatusOK || resp.StatusCode > http.StatusPartialContent:
			message := "unknown"
			if strings.HasPrefix(contentType, "text/") {
				message = strings.TrimSpace(string(data))
			}
			return fmt.Errorf("%d - %s", resp.StatusCode, message)
		default:
			return fmt.Errorf("received unexpected content-type: %s", string(contentType))
		}
	}

	if err := protojson.Unmarshal(data, res); err != nil {
		return fmt.Errorf("failed to unmarshal response: %w", err)
	}
	return nil
}
